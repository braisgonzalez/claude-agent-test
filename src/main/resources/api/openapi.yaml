openapi: 3.0.3
info:
  title: User Management API
  description: API for managing users and customers with hexagonal architecture
  version: 1.0.0
  contact:
    name: Development Team
    email: dev@company.com

servers:
  - url: http://localhost:8080/api/v1
    description: Development server

paths:
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a paginated list of users
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sort
          in: query
          description: Sorting criteria
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: User with username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Users
      summary: Update user
      description: Update an existing user with the provided information
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Email already exists for another user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a specific user by their ID
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /customers:
    get:
      tags:
        - Customers
      summary: Get all customers
      description: Retrieve a paginated list of customers
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sort
          in: query
          description: Sorting criteria
          required: false
          schema:
            type: array
            items:
              type: string
        - name: status
          in: query
          description: Filter by customer status
          required: false
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, PROSPECT]
        - name: industry
          in: query
          description: Filter by industry
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Customers
      summary: Create a new customer
      description: Create a new customer with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Customer with email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /customers/{id}:
    get:
      tags:
        - Customers
      summary: Get customer by ID
      description: Retrieve a specific customer by their ID
      parameters:
        - name: id
          in: path
          description: Customer ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Customers
      summary: Update customer
      description: Update an existing customer with the provided information
      parameters:
        - name: id
          in: path
          description: Customer ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Email already exists for another customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Customers
      summary: Delete customer
      description: Delete a specific customer by their ID
      parameters:
        - name: id
          in: path
          description: Customer ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Customer deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 255
        firstName:
          type: string
          minLength: 1
          maxLength: 100
        lastName:
          type: string
          minLength: 1
          maxLength: 100
        role:
          type: string
          enum: [ADMIN, USER]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - username
        - email
        - firstName
        - lastName
        - role
        - isActive
        - createdAt
        - updatedAt

    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 255
        firstName:
          type: string
          minLength: 1
          maxLength: 100
        lastName:
          type: string
          minLength: 1
          maxLength: 100
        role:
          type: string
          enum: [ADMIN, USER]
        password:
          type: string
          minLength: 8
          maxLength: 100
      required:
        - username
        - email
        - firstName
        - lastName
        - role
        - password

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        firstName:
          type: string
          minLength: 1
          maxLength: 100
        lastName:
          type: string
          minLength: 1
          maxLength: 100
        role:
          type: string
          enum: [ADMIN, USER]
        isActive:
          type: boolean

    UserPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
        page:
          $ref: '#/components/schemas/PageInfo'
      required:
        - content
        - page

    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        companyName:
          type: string
          minLength: 1
          maxLength: 255
        contactPerson:
          type: string
          minLength: 1
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        phone:
          type: string
          maxLength: 20
        address:
          $ref: '#/components/schemas/Address'
        industry:
          type: string
          maxLength: 100
        status:
          type: string
          enum: [ACTIVE, INACTIVE, PROSPECT]
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - companyName
        - contactPerson
        - email
        - status
        - createdAt
        - updatedAt

    Address:
      type: object
      properties:
        street:
          type: string
          minLength: 1
          maxLength: 255
        city:
          type: string
          minLength: 1
          maxLength: 100
        state:
          type: string
          maxLength: 100
        zipCode:
          type: string
          maxLength: 20
        country:
          type: string
          minLength: 1
          maxLength: 100
      required:
        - street
        - city
        - country

    CreateCustomerRequest:
      type: object
      properties:
        companyName:
          type: string
          minLength: 1
          maxLength: 255
        contactPerson:
          type: string
          minLength: 1
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        phone:
          type: string
          maxLength: 20
        address:
          $ref: '#/components/schemas/Address'
        industry:
          type: string
          maxLength: 100
        status:
          type: string
          enum: [ACTIVE, INACTIVE, PROSPECT]
          default: PROSPECT
      required:
        - companyName
        - contactPerson
        - email
        - address

    UpdateCustomerRequest:
      type: object
      properties:
        companyName:
          type: string
          minLength: 1
          maxLength: 255
        contactPerson:
          type: string
          minLength: 1
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        phone:
          type: string
          maxLength: 20
        address:
          $ref: '#/components/schemas/Address'
        industry:
          type: string
          maxLength: 100
        status:
          type: string
          enum: [ACTIVE, INACTIVE, PROSPECT]

    CustomerPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
        page:
          $ref: '#/components/schemas/PageInfo'
      required:
        - content
        - page

    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: string
        timestamp:
          type: string
          format: date-time
        path:
          type: string
      required:
        - message
        - timestamp

    ValidationError:
      type: object
      properties:
        message:
          type: string
        code:
          type: string
        timestamp:
          type: string
          format: date-time
        path:
          type: string
        fieldErrors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
            required:
              - field
              - message
      required:
        - message
        - timestamp

    PageInfo:
      type: object
      properties:
        number:
          type: integer
          minimum: 0
        size:
          type: integer
          minimum: 1
        totalElements:
          type: integer
          minimum: 0
        totalPages:
          type: integer
          minimum: 0
        first:
          type: boolean
        last:
          type: boolean
      required:
        - number
        - size
        - totalElements
        - totalPages
        - first
        - last

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

tags:
  - name: Users
    description: User management operations
  - name: Customers
    description: Customer management operations